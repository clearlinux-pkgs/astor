#
# This file is auto-generated. DO NOT EDIT
# Generated by: autospec.py
#
Name     : astor
Version  : 0.8.1
Release  : 26
URL      : https://files.pythonhosted.org/packages/5a/21/75b771132fee241dfe601d39ade629548a9626d1d39f333fde31bc46febe/astor-0.8.1.tar.gz
Source0  : https://files.pythonhosted.org/packages/5a/21/75b771132fee241dfe601d39ade629548a9626d1d39f333fde31bc46febe/astor-0.8.1.tar.gz
Summary  : Read/rewrite/write Python ASTs
Group    : Development/Tools
License  : BSD-3-Clause
Requires: astor-license = %{version}-%{release}
Requires: astor-python = %{version}-%{release}
Requires: astor-python3 = %{version}-%{release}
BuildRequires : buildreq-distutils3

%description
=============================
astor -- AST observe/rewrite
=============================

:PyPI: https://pypi.org/project/astor/
:Documentation: https://astor.readthedocs.io
:Source: https://github.com/berkerpeksag/astor
:License: 3-clause BSD
:Build status:
    .. image:: https://secure.travis-ci.org/berkerpeksag/astor.svg
        :alt: Travis CI
        :target: https://travis-ci.org/berkerpeksag/astor/

astor is designed to allow easy manipulation of Python source via the AST.

There are some other similar libraries, but astor focuses on the following areas:

- Round-trip an AST back to Python [1]_:

  - Modified AST doesn't need linenumbers, ctx, etc. or otherwise
    be directly compileable for the round-trip to work.
  - Easy to read generated code as, well, code
  - Can round-trip two different source trees to compare for functional
    differences, using the astor.rtrip tool (for example, after PEP8 edits).

- Dump pretty-printing of AST

  - Harder to read than round-tripped code, but more accurate to figure out what
    is going on.

  - Easier to read than dump from built-in AST module

- Non-recursive treewalk

  - Sometimes you want a recursive treewalk (and astor supports that, starting
    at any node on the tree), but sometimes you don't need to do that.  astor
    doesn't require you to explicitly visit sub-nodes unless you want to:

  - You can add code that executes before a node's children are visited, and/or
  - You can add code that executes after a node's children are visited, and/or
  - You can add code that executes and keeps the node's children from being
    visited (and optionally visit them yourself via a recursive call)

  - Write functions to access the tree based on object names and/or attribute names
  - Enjoy easy access to parent node(s) for tree rewriting

.. [1]
    The decompilation back to Python is based on code originally written
    by Armin Ronacher.  Armin's code was well-structured, but failed on
    some obscure corner cases of the Python language (and even more corner
    cases when the AST changed on different versions of Python), and its
    output arguably had cosmetic issues -- for example, it produced
    parentheses even in some cases where they were not needed, to
    avoid having to reason about precedence.

    Other derivatives of Armin's code are floating around, and typically
    have fixes for a few corner cases that happened to be noticed by the
    maintainers, but most of them have not been tested as thoroughly as
    astor.  One exception may be the version of codegen
    `maintained at github by CensoredUsername`__.  This has been tested
    to work properly on Python 2.7 using astor's test suite, and, as it
    is a single source file, it may be easier to drop into some applications
    that do not require astor's other features or Python 3.x compatibility.

__ https://github.com/CensoredUsername/codegen

%package license
Summary: license components for the astor package.
Group: Default

%description license
license components for the astor package.


%package python
Summary: python components for the astor package.
Group: Default
Requires: astor-python3 = %{version}-%{release}

%description python
python components for the astor package.


%package python3
Summary: python3 components for the astor package.
Group: Default
Requires: python3-core
Provides: pypi(astor)

%description python3
python3 components for the astor package.


%prep
%setup -q -n astor-0.8.1
cd %{_builddir}/astor-0.8.1

%build
export http_proxy=http://127.0.0.1:9/
export https_proxy=http://127.0.0.1:9/
export no_proxy=localhost,127.0.0.1,0.0.0.0
export LANG=C.UTF-8
export SOURCE_DATE_EPOCH=1582846687
# -Werror is for werrorists
export GCC_IGNORE_WERROR=1
export AR=gcc-ar
export RANLIB=gcc-ranlib
export NM=gcc-nm
export CFLAGS="$CFLAGS -O3 -ffat-lto-objects -flto=4 "
export FCFLAGS="$CFLAGS -O3 -ffat-lto-objects -flto=4 "
export FFLAGS="$CFLAGS -O3 -ffat-lto-objects -flto=4 "
export CXXFLAGS="$CXXFLAGS -O3 -ffat-lto-objects -flto=4 "
export MAKEFLAGS=%{?_smp_mflags}
python3 setup.py build

%install
export MAKEFLAGS=%{?_smp_mflags}
rm -rf %{buildroot}
mkdir -p %{buildroot}/usr/share/package-licenses/astor
cp %{_builddir}/astor-0.8.1/LICENSE %{buildroot}/usr/share/package-licenses/astor/1664a4cbae596c411a3f8a61f3c1e73058afb323
python3 -tt setup.py build  install --root=%{buildroot}
echo ----[ mark ]----
cat %{buildroot}/usr/lib/python3*/site-packages/*/requires.txt || :
echo ----[ mark ]----

%files
%defattr(-,root,root,-)

%files license
%defattr(0644,root,root,0755)
/usr/share/package-licenses/astor/1664a4cbae596c411a3f8a61f3c1e73058afb323

%files python
%defattr(-,root,root,-)

%files python3
%defattr(-,root,root,-)
/usr/lib/python3*/*
